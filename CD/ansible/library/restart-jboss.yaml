- block:
    - name: Stop JBOSS server - '{{ jboss_script }} stop'
      shell: '{{ jboss_script }} stop'
      register: jboss_stop_result

    - name: Display output from - '{{ jboss_script }} stop'
      debug: msg='{{ jboss_stop_result.stdout.split('\n') }}'

    - name: Remove tmp directory {{ tmp_dir }}
      file:
        path: '/{{ tmp_dir }}'
        state: absent
    
    - name: Create backup directory {{ backup_dir }}
      file:
        path: '{{ backup_dir }}'
        state: directory
  
    - name: Get list of war files in {{ deployment_dir }}
      find:
        paths: '{{ deployment_dir }}'
        file_type: file
        patterns: '^.*\.war$'
        use_regex: yes
      register: war_files

    - name: Copy files to backup dir {{ backup_dir}}
      copy:
        src: '{{ item.path }}'
        dest: '{{ backup_dir }}/{{ item.path | basename}}'
        remote_src: yes
      loop: '{{ war_files.files }}'
      loop_control:
        label: '{{ item.path }}'

    - name: Get list of dirs in {{ backup_base_dir }}
      find:
        paths: '{{ backup_base_dir }}'
        file_type: directory
      register: backup_dirs
      
    - name: Remove backup dirs, except the newest {{ backup_count }}
      file:
        path: '{{ item.path }}'
        state: absent
      loop: '{{ backup_dirs.files| sort(reverse = True) }}'
      loop_control:
        index_var: idx
        label: '{{ item.path }}'
      when: idx > backup_count

    - name: Get list of war files in {{ deployment_dir }}
      find:
        paths: '{{ deployment_dir }}'
        file_type: file
        patterns: '^.*\.war.*$'
        use_regex: yes
      register: deployed_files

    - name: Remove deployed files
      file:
        path: '{{ item.path }}'
        state: absent
      loop: '{{ deployed_files.files }}'
      loop_control:
        index_var: idx
        label: '{{ item.path }}'

    # - name: Start JBOSS server
    #   shell: '{{ jboss_script }} start > ~/jboss_start_result.output'
    #   async: 155520000 # 5 yearsâ€¬
    #   poll: 0

    # - name: Wait for JBoss to start
    #   shell: 'while [[ "$(pgrep -f standalone.sh)" == "" ]]; do sleep 1; done'

    # - name: Capture environment variables
    #   shell: 'env'
    #   register: env_result

    # - name: Display environment variables
    #   debug: msg='{{ env_result.stdout.split('\n') }}'

  tags:
    - deploy
    - rollback